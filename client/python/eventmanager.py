# MediaNav's event manager

from weakref import WeakKeyDictionary

class Event:
    """ Superclass for events that might be generated by an object """

    def __init__(self, type=None, data=None):
        self.type = type
        self.data = data

    def __str__(self):
        return "Event(%s {%s})" % (self.type, self.data)

class EventManager:
    """ Object is responsible for coordinating events """

    def __init__(self):
        self.listeners = WeakKeyDictionary() #: List of objects listening for events

    def register_listener(self, listener):
        """ Register a new event listener """
        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        """ Unregister an event listener """
        if listener in self.listeners.keys():
            del self.listeners[listener]

    def dispatch_event(self, event):
        """ Dispatch a new event to all listeners """
        # TODO: Update this so it doesn't spam all listeners with all events
        for listener in self.listeners.keys():
            listener.handle_event(event)
